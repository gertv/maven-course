h1. Planning

* Installing Maven and your first build
* Apache Maven core concepts
* Building a Java project
* Working with plugins
* Properties and resource filtering
* User and environment specific builds
* Building enterprise projects
* Introduction to plugin development


h1. Apache Maven

h2. Installing Maven and doing your first build

h1. Install Apache Maven

* Download Apache Maven from http://maven.apache.org/download.html
* Extract the zipfile to your local hard disk, e.g. to the c:\tools\directory
* Change environment variables
** set M2_HOME to e.g. c:\tools\apache-maven-2.0.9
** set JAVA_HOME to JDK installation directory
** change PATH variable to %M2_HOME%/bin;%PATH%
* Test your installation
** running mvn --version sould output version info

h1. Your first Maven build

* Create a project directory e.g. c:\projects\maven
* Create a file called pom.xml inside this directory

{snippet:url=src/main/snippets/pom.xml|pygmentize=true}
{snippet}

h1. Your first Maven Build

* Now run the mvn install command

{snippet:url=src/main/snippets/install.text|pygmentize=true}
{snippet}

* Great, your first Maven build succeeded! Now let's take a look at what really happened...

h1. Apache Maven

h2. Apache Maven Concepts

h1. Apache Maven Concepts

* What is Maven?
* Maven Core concepts
** POM
** Artifact
** Repository
** Plugin
** Lifecycle
* Maven versus Ant
* Looking back at our first build

h1. What is Maven?

* Software project management framework/tool
** builds
** versioning
** project reports
** ...

h1. What is Maven?

* Design principles
** convention over configuration
*** standard directory layout for projects
*** one primary output per project
*** standard naming conventions
** declarative build process definition
*** POM
*** build life cycle
** reuse of build logic
** standardized organization of dependencies

h1. POM

* POM = Project Object Model
** defined in pom.xml
** contains all the information Maven needs to manage your project's build
*** name, group, description
*** dependencies
*** plugins
*** build profiles
*** ...
** a POM can inherit from another POM

h1. Artifact

* Every artifact has
** a group id
** an artifact id
** a version (1.0-SNAPSHOT, 2.1.0, ...)
** an artifact type (pom, jar, war, ear, ...)
** (optionally) an artifact classifier

h1. Repository

* Artifacts are stored in a repository
** standard directory layout \\ (<group id>/<artifact id>/<version>) \\ e.g. be/anova/abis/maven-pom/1.0-SNAPSHOT
** standard naming conventions for artifacts \\(<artifact-id>-<version>) \\ e.g. maven-pom-1.0-SNAPSHOT.pom

h1. Repository

* Local repository
** is created autmatically in <user_home>/.m2/repository
** all dependencies are loaded from this repository first
* Remote repository
** is used by Maven to download additional artifacts
** all downloads are copied to the local repo
** central repo (http://repo2.maven.org/maven2/) is the default, but you can configure additional repos

h1. Plugin

* Maven is a plugin execution framework
** uses the Plexus container project
** you can build your own plugins and have MAven execute them as part of the build
** plugins have goals
** goals are identified by <plugin id>:<goal id> \\ e.g. clean:clean, compiler:compile, install:install,...

h1. Plugin

* Some common plugins
maven-clean-plugin      clean up after the build
maven-compiler-plugin   compiles Java sources
maven-deploy-plugin     deploy an artifact into a remote repo
maven-install-plugin    install an artifact into the local repo
maven-resources-plugin  copy resources to the output directory
maven-site-plugin       generate a site for the project
maven-surefire-plugin   runs JUnit (or TestNG) tests
* There are a lot of plugins out there for generating, building, testing, releasing, packaging, ... projects

h1. Build Lifecycle

* The build lifecycle consists of phases
** examples: validate, compile, test, package, integration-test, verify, install, deploy
* In every build phase, plugin goals are executed
* Goals are bound to the lifecycle phases
** based on the packaging
*** example: for pom packaging...
*** package > site:attach-descriptor
*** install > install:install-file
** by adding a plugin
** by explicitly configuring it in the POM

h1. Maven versus Ant

* Maven versus Ant
** Ant is excellent for creating build scripts, Maven provides a more holistic solution
** Maven already has conventions, with Ant you have to build your own conventions
** Maven is declarative, Ant is procedural
** Maven comes with its own lifecycle, with Ant you have to build your own
* You can use Ivy/Antlibs to add some 'missing' features to Ant

h1. Looking back at our first build

* Let's now run mvn install again
{snippet:url=src/main/snippets/install2.text|pygmentize=true}
{snippet}

h1. Looking back at our first build

* Do you see ...
** the lifecycle goals that are determined by the packaging pom.xml file?
** the main artifact being installed in the local repo?
** the plugins that have been used are already in the local repo and are not downloaded again?
* Now browse the local repository and look for ...
** your own artifact
** the artifacts for the plugins that have been used (the group id is org.apache.maven.plugings)
* Can you also find these at the central repo?

h1. Apache Maven
h2. Building a Java project

h1. Building a Java project

* Creating the project
** kickstart the project with Maven archetypes
** standard directory layout
* Building the project
** running the build
** (transitive) dependencies
* IDE integration
* Exercise: Building a Java project

h1. Create a Java Project

* There are two ways of creating a Java project
** option 1: manually
*** create a directory
*** create a pom.xml file and specify packaging 'jar'
*** create the standard directory layout
** option 2: use a Maven archetype
*** run the maven archetype:generate command
*** select the maven-quickstart-archetype
*** fill in te group id, artifact id, ... in the wizard
*** the archetype will generate everything from option 1

h1. Standard directory layout
{snippet:url=src/main/snippets/directory_layout.text|pygmentize=true}
{snippet}

h1. Building a Java project

* You can run these commands
** mvn compile &nbsp; -> compiles the sources
** mvn test &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;    -> run the unit tests
** mvn package -> build the jar file in the /target folder
** mvn install &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> install the jar file in the local repo
* Running mvn install will do all of those (remember the lifecycle?)

h1. Dependencies

* The Java project  we generated uses JUnit tests
* In Maven, we use a <dependency> to 'use' the additional library
* Maven will download the dependency JAR from a repository and copy it to the local repository
{snippet:url=src/main/snippets/dependency.text|pygmentize=true}
{snippet}

h1. Dependencies

* A dependency is identified by
** a group id
** an artifact id
** a version
** an artifact type (defaults to jar)
** (optionally) a classifier
* Other options for <dependency>
** <optional>true</optional>
** <exclusions><exclusion> to exclude a transitive dependency

h1. Dependencies

* Transitive dependecies
** sometimes a JAR requires other JARs
** Maven can lookup these dependencies from the POM
** example: commons-logging 1.1
{snippet:url=src/main/snippets/commons-logging.text|pygmentize=true}
{snippet}

h1. Dependecies

* Scope
** Determines when/where the dependency is available
*** in the current build
*** as a transitive dependecy
** possible values
*** compile
*** runtime
*** test
*** provided
*** system
*** import

h1. Dependecies

* Getting more information about the dependecies
** use the maven-dependency-plugin
*** mvn dependency:resolve shows a list of all artifacts that have been resolved
*** mvn dependeny:tree shows a tree of (transitive) dependencies
** use the maven-site-plugin
*** mvn site generates the project site with the dependency report

h1. IDE integration

* Working with Eclipse & Maven
** with the maven-eclipse-plugin
*** in Eclipse: add a classpath variable M2_REPO
*** run the mvn eclipse:eclipse goal
*** import existing project into the workspace
** with Eclipse Maven plugin (http://m2eclipse.codehaus.org)
* Similar solutions exist for IDEA, Netbeans, ...

h1. Exercise: Building Java projects

* A new Java project
** Start a new Java project with Maven archetype
** Run the Maven build
* Working with dependencies
** Add Camel 1.5.0, group = org.apache.camel, artifact = camel-core
** check the dependency tree
** generate the project site with the dependency report
** use the CamelContext interface inside your class
** what happens if you change the scope to 'test'?


h1. Apache Maven
h2. Working with plugins


h1. Working with plugins

* Configuring plugins
** Adding and configuring a build plugin
*** Configuring plugin execution
** Adding and configuring a reporting plugin
* Some plugin examples

h1. Configuring plugins

* Adding a build plugin to the POM
** use the <plugin> element inside <build>
** specify the plugin's artifact and group id
{snippet:url=src/main/snippets/build_plugin.text|pygmentize=true}
{snippet}

h1. Configuring plugins

* Configure the plugin
** add a <configuration> element with an extra element for every parameter
** example: configure the compiler plugin for Java 5
{snippet:url=src/main/snippets/java_plugin.text|pygmentize=true}
{snippet}

h1. Configuring plugins

* Adding a reporting plugin to the POM
** use the <plugin> element inside <reporting>
** specify the plugin's artifact and group id
{snippet:url=src/main/snippets/reporting_plugin.text|pygmentize=true}
{snippet}

h1. Configuring plugins

* Configure the plugin
** add a <configuration> element with an extra element for each parameter
** example: configure a document title for javadoc
{snippet:url=src/main/snippets/javadoc_plugin.text|pygmentize=true}
{snippet}

h1. Configuring plugins

* Configuring plugin execution

** many plugins will automatically bind to a phase...
** ... but you can also configure the goals to be executed in a phase
{snippet:url=src/main/snippets/plugin_execution.text|pygmentize=true}
{snippet}

h1. Some plugin examples

* Using the maven-antrun-plugin
** create an extra directory inside /target
{snippet:url=src/main/snippets/antrun_plugin.text|pygmentize=true}
{snippet}

h1. Some plugin examples

* Using the maven-source-plugin
** generate a sources jar that is published in the repo
** pop quiz: why do we bind to the verify phase?
{snippet:url=src/main/snippets/sources_plugin.text|pygmentize=true}
{snippet}

h1. Some plugin examples

* Using Apache Felix' maven-bundle-plugin
** create an OSGi bundle and configure exports
{snippet:url=src/main/snippets/bundle_plugin.text|pygmentize=true}
{snippet}

h1. Exercise: configuring plugins

* Start a web project
** use the maven-archetype-webapp
*** what packaging type is used?
*** can you figure out the directory naming conventions for web applications?
* Add a plugin
** add the Jetty plugin (group: org.mortbay.jetty, artifact: maven-jetty-plugin)
** now run mvn jetty:run to run the webapp with Jetty
** can you configure this goal to be run automatically in the verify phase?

h1. Apache Maven
h2. Properties and resource filtering

h1. Properties and resource filtering

* Properties
** Defining properties
** Using properties in the POM
* Resource filtering
** Configure resource filtering

h1. Properties

* Defining properties
** built-in properties like pom.version, pom.name, ...
** every tag inside the <properties> tag becomes a property as well
** example: define the version for ActiveMQ and Scala
{snippet:url=src/main/snippets/properties.text|pygmentize=true}
{snippet}

h1. Properties

* Using properties in the POM
** properties can be used in most places inside the POM
** the syntax for using a property is ${<property>}
{snippet:url=src/main/snippets/property_syntax.text|pygmentize=true}
{snippet}

h1. Resource filtering

* Configure resource filtering
** add a <resource> element with true
** every occurrence of the ${<property name>} syntax will be replaced when copying resources
{snippet:url=src/main/snippets/resource_filtering.text|pygmentize=true}
{snippet}

h1. Properties and resource filtering

* Improve the simple Java project
** move the Apache Camel version into a property
** configure the dependency to use the property
** add a README.text file to the project resources, which contains the Camel version as well as the project version

h1. Apache Maven
h2. User and environment specific builds

h1. User and environment specific builds

* Maven settings
* Profiles

h1. Maven settings

* There are 2 locations where a settings file may live
** The Maven install: $M2_HOME/conf/settings.xml
** A user's install: ${user.home}/.m2/settings.xml
*  Content is merged when both exist
** user-specific settings is being dominant

h1. Maven settings

* Settings details
** local repository
** servers
** mirrors
** profiles

h1. Maven settings

* Local repository
** this value is the path of this build system's local repository
** default value is ${user.home}/.m2/repository.
** especially useful for a main build server allowing all logged-in users to build from a common local repository
{snippet:url=src/main/snippets/localrepo.text|pygmentize=true}
{snippet}

h1. Maven settings

* Servers
** repositories for download and deployment are defined in POM
** some settings shouldn't be distributed
*** ID of the server
*** username
*** password \\ (a path to a private key can be used instead)
{snippet:url=src/main/snippets/server.text|pygmentize=true}
{snippet}

h1. Maven settings

* Mirrors of repositories
** reasons to use mirros:
*** a synchronized mirror is is geographically closer and faster
*** replace a repo with your own internal repo which you have greater control over
** settings:
*** id, unique identifier
*** url, the build system will use this url instead of of the original repo url
*** mirrorOf, the id of the repo this is a mirror of

h1. Profiles

* Modify the POM at build time
* give equivalent-but-different parameters for a different environments
* Using different profiles >> different build results

h1. Profiles

* Different types
** per project
*** defined in pom.xml
** per user
*** defined in user maven settings
** global
*** defined in global maven settings

h1. Profiles

* Trigger a profile:
** Explicitly
** Through Maven settings
** Based on environment variables
** OS settings
** Present or missing files


h1. Profiles

* Activate explicitly
** mvn groupId:artifactId:goal -P profile-1,profile-2
** no other profiles other than those specified are activated

h1. Profiles

* Activate via Maven settings
{snippet:url=src/main/snippets/activate_maven_settings.text|pygmentize=true}
{snippet}

h1. Profiles

* Activate based on environment
{snippet:url=src/main/snippets/activate_environment.text|pygmentize=true}
{snippet}

h1. Profiles

* Activate based on os
{snippet:url=src/main/snippets/activate_os.text|pygmentize=true}
{snippet}


h1. Apache Maven
h2. Building enterprise projects


h1. Building enterprise projects

* Multi-module builds
* POM inheritance
** explicit POM inheritance
** super POM
* Improving POM maintainability
** dependecy management
** plugin management

h1. Multi-module builds

* Enterprise projects are often more complex
** multiple modules for technical reasons
*** a web project that uses a core implementation JAR
*** EAR files can contain one or more WAR, JAR, RAR
*** a JBI SA contains multiple service units
** multiple modules for project management
*** separate API and implementation JAR files
*** modules developed by seperate teams

h1. Multi-module builds

* Creating a multi-module build
** create a project with packaging 'pom'
** for every module, create
*** a subdirectory with the module Maven project
*** a <module> entry in the root project's POM, referring to the subdirectory
** modules can have dependencies on each other
*** Maven will determine the build order for the entire set of modules

* Example web application
** 2 modules: web and core module

h1. Multi-module builds

* The root directory contains
** two directories:  core and web
** the root pom.xml
{snippet:url=src/main/snippets/root_pom.xml|pygmentize=true}
{snippet}

h1. Multi-module builds

* Each subdirectory contains its own pom.xml
** example: the web pom.xml depends on the core
{snippet:url=src/main/snippets/web_pom.xml|pygmentize=true}
{snippet}

h1. Multi-module builds

* You can build modules separately or together
{snippet:url=src/main/snippets/multi-module_build.text|pygmentize=true}
{snippet}

h1. POM inheritance

* A POM can inherit from another POM
** move common definitions into the parent POM
** what is inherited
*** identifiers (you must override group/artifact)
*** dependencies
*** developers and contributors
*** plugin list
*** reports list
*** plugin executions
*** plugin configuration

h1. POM inheritance

* POM inheritance
** configure <parent/> element
*** artifactId
*** groupId
*** version
** module POM often inherits from root POM
** other common patterns:
*** prototype parent POM
*** company-wide parent POM

h1. POM inheritance

* Example: the core POM from our webapp
{snippet:url=src/main/snippets/core_pom.xml|pygmentize=true}
{snippet}

h1. POM inheritance

* The Super POM
** every POM without a <parent/> implicitly inherits from the Super POM
** is in the maven-uber.jar
** it defines
*** the central repo (central is the repository id), both for dependencies and plugins
*** the standard directory layout
*** default versions of the core plugins (starting from Maven 2.0.9)

h1. Dependency management

* Defining managed dependencies
** define dependency version only once inside <dependencyManagement/>
{snippet:url=src/main/snippets/dependencymanagement.text|pygmentize=true}
{snippet}

h1. Dependency management

* Using managed dependencies
** omit <version/> from <dependency/>
** enforce managed version on transitive dependecies
{snippet:url=src/main/snippets/managed_dependency.text|pygmentize=true}
{snippet}

h1. Plugin management

* Same as dependency management, but for plugins
** define a plugin version and configuration centrally example: configure checkstyle plugin
{snippet:url=src/main/snippets/plugin_management.text|pygmentize=true}
{snippet}

h1. Building enterprise projects

* Create a new, multi-module project
** containing a web and a plain java module
** the web module depends on the plain java module
** run the build with and without POM inheritance configured in the modules -- What's the difference?
** use mvn:dependency:tree to see the difference between adding camel-core as:
*** a dependency in the parent POM
*** a dependency in a module POM with dependency management in the parent POM

h1. Apache Maven
h2. Plugin development

h1. Plugin development

* Before you start ...
* Concepts and terminology
* Developing a plug-in
** Starting a new project
** Coding the plug-in
* Using the plug-in

h1. Before you start

* For a one-off task, consider
** maven-antrun-plugin to run Ant tasks
** groovy-maven-plugin to run Groovy script
** ... or some other lightweight/scripting solution
* Developing a new Maven plugin
** requires more knowledge about underlying mechanisms
** is probably only worth the effort if you can reuse the plugin

h1. Concepts and terminology

* Maven is built on top of the Plexus IoC container
** very similar to Spring
** Maven uses field and setting dependency injection
* A plugin
** is a JAR file with a META/INF/maven/plugin.xml file
** contains Plexus components
* A Mojo is
** a component in the Plexus container
** the Java type for a Maven plugin goal

h1. Developing a plugin

* Start a new plugin project
** manually
*** create a new project with packaging 'maven-plugin'
*** add the maven-plugin-api as a dependency
*** code a java class that extends AbstractMojo and contains Javadoc annotations for generating the plugin.xml
** using archetype
*** use mvn archetype;generate and select the maven-archetype-mojo archetype to generate the new plugin project

h1. Developing the plugin

* Coding the plugin
** Plugin implementations starts in the execute() method
** javadoc annotations
*** @goal to name the goal that matches the Mojo
*** @phase to specify default phase of execution
*** @parameter can be used to annotate fields to become goal parameters (@required to make it a required field, you can specify a default value)
** IoC: @component to inject a Maven component
*** ArtifactFactory, MavenProject, ArtifactRepository, ...

h1. Developing the plugin

* Coding the plugin
{snippet:url=src/main/snippets/plugin_code.text|pygmentize=true}
{snippet}

h1. Developing the plugin

* Building the project with the maven-plugin-plugin
** Automatically for 'maven-plugin' packaging
** it will generate the plugin.xml file
*** based on the information in the annotations
*** for the plugin prefix, uses naming convention \\ xyz-maven-plugin or maven-xyz-plugin
** it will generate the components.xml file \\ (used for @component injection by Plexus)
*** based on the information in the annotations

h1. Using the plugin

* Same as for any other plugin
** define it in the <build/> section
{snippet:url=src/main/snippets/using_plugin.text|pygmentize=true}
{snippet}

h1. Plugin development

* Create a new plugin
** Start the plugin project with the archetype
** modify the plugin to calculate how much you have learned (a random number between 0 and 10 will do)
** build your plugin
* Use your own plugin
** configure your new plugin in the multi-module project we created
** be surprised how much (or how little) you learned from creating each module of module of the build process

h1. Apache Maven
h2. Tips & Tricks

h1. Tips & Tricks

* Troubleshooting Maven builds
* Create a company repository
* Your own parent POM
* Build builds as you build software

h1. Tips & Tricks

* Troubleshooting Maven builds
** use mvn dependency:tree
*** (optionally) add -Dverbose=true for more detail
** use mvn -X for debug logging
*** warning: this will give you a LOT of output
** run module builds separately
*** POM inheritance can lead to dependency inheritance problems
*** mvn help:effective-pom shows the merged pom

h1. Tips & Tricks

* Create a company repository
** mirror for central and/or other public repo
** keep copy of own artifact versions
** use enterprise repository software
*** Apache Archiva
*** JFrog Artifactory
*** Sonatype Nexus
** this ensure a reproducible build
*** the version you use will still be available next time

h1. Tips & Tricks

* Develop your own company parent POM
** promoting your own standards
** enforcing some common settings \\ (reporting, checkstyle, ...)
** as a possibility for adding company-wide configurations later on
* Be careful not to add to much to this POM

h1. Tips & Tricks

* Build your builds as you build your software
** don't use everything you learned today in every POM
** only add complexity when necessary
*** POM inheritance can really add to the complexity
*** dependency and plugin management only make sense in a large build
*** reporting is only useful if the reports are being used

h1. Apache Maven
h2. Wrap up

h1. POM reference

* Basic settings
** <groupId>
** <artifactId>
** <version>
** <packaging>
** <dependencies>
** <parent>
** <dependencyManagement>
** <modules>
** <properties>

h1. POM reference

** <build>
*** <sourceDirectory>, <testSourceDirectory>, ...
*** <resources> and <testResources>
*** <plugins>
*** <pluginManagement>
*** <extension>
** <reporting>
*** <outputDirectory>
*** <plugins>

h1. POM reference

* More settings
** <name>
** <description>
** <url>
** <inceptionYear>
** <licenses>
** <organization>
** <developers>
** <contributors>

h1. POM reference

* Environment Settings
** <issueManagement>
** <ciManagement>
** <mailingLists>
** <scm>
** <prerequisites>
** <repositories>
** <pluginRepositories>
** <distributionManagement>
** <profiles>

h1. Questions?

h1. The end
